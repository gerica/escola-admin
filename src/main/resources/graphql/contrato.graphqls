input ContratoRequest {
    id: ID
    idCliente: ID!
    numeroContrato: String!
    dataInicio: Date!
    dataFim: Date!
    valorTotal: BigDecimal!
    desconto: BigDecimal!
    statusContrato: String!
    descricao: String
    termosCondicoes: String
    dataAssinatura: DateTime
    periodoPagamento: String
    dataProximoPagamento: Date
    observacoes: String
}

input ContratoModeloRequest{
    id: ID!
    contratoDoc: String
}

type ContratoResponse {
    id: ID
    idCliente: ID
    nomeCliente: String
    numeroContrato: String
    dataInicio: Date
    dataFim: Date
    valorTotal: BigDecimal
    desconto: BigDecimal
    statusContrato: String
    descricao: String
    termosCondicoes: String
    dataAssinatura: Date
    periodoPagamento: String
    dataProximoPagamento: Date
    observacoes: String
    contratoDoc: String
}

type ContratoResponsePage {
    content: [ContratoResponse]
    totalPages: Int
    totalElements: Long
    number: Int
    size: Int
    first: Boolean!
    last: Boolean!
    empty: Boolean!
}

type  ContratoBase64Response{
    nomeArquivo: String!
    conteudoBase64: String
}

extend type Query {
    fetchAllContratos(
        filtro: String
        status: [StatusContrato]
        page: Int = 0 # Default to page 0
        size: Int = 10 # Default to size 10
        sort: [SortRequest]
    ): ContratoResponsePage!

    fetchById(id: ID): ContratoResponse!
    fetchContratoByIdMatricula(id: ID): ContratoResponse!
    downloadDocContrato(id: ID!): ContratoBase64Response!
}

extend type Mutation {
    saveContrato(request: ContratoRequest!): String!
    saveContratoModelo(request: ContratoModeloRequest!): String!
    parseContrato(id: ID!): ContratoResponse!
}


