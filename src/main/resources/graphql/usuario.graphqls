input UsuarioRequest {
    id: ID
    idEmpresa: ID
    username: String
    password: String
    firstname: String
    lastname: String
    email: String
    enabled: Boolean
    roles: [Role]
}

type UsuarioResponse {
    id: ID!,
#    idEmpresa: ID
    empresa: EmpresaResponse
    username: String
    firstname: String
    lastname: String
    email: String
    enabled: Boolean
    roles: [Role]
    dataCadastro: Date
    dataAtualizacao: Date
}

type UsuarioResponsePage {
    content: [UsuarioResponse]
    totalPages: Int
    totalElements: Long
    number: Int
    size: Int
    first: Boolean!
    last: Boolean!
    empty: Boolean!
}

extend type Query {
    fetchAllUsuariosByFilter(
        filtro: String
        page: Int = 0 # Default to page 0
        size: Int = 10 # Default to size 10
        sort: [SortRequest]
    ): UsuarioResponsePage!

    fetchByIdUsuario(id: ID): UsuarioResponse!
}

extend type Mutation {
    saveUsuario(request: UsuarioRequest!): UsuarioResponse!
}