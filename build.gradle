plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.escola.auth'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = 'https://repo.spring.io/snapshot' }
}

ext {
	set('springCloudVersion', "2025.0.0")
	mapstructVersion = "1.5.5.Final"
}

springBoot {
	buildInfo()
}

dependencies {
	// --- Spring Boot Starters ---
	// Suporte essencial para aplicações web, incluindo RESTful com Spring MVC.
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// Suporte para programação reativa e o WebClient para chamadas HTTP não-bloqueantes.
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	// Facilita o acesso a dados com JPA (Java Persistence API) via Spring Data e Hibernate.
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// Habilita funcionalidades de segurança, como autenticação e autorização.
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// Adiciona suporte para a criação de APIs GraphQL.
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	// Fornece as dependências para validação de beans (ex: @NotBlank, @NotNull).
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// --- Spring Cloud ---
	// Permite que este serviço se registre como um cliente no Eureka Server para service discovery.
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

	// --- Database ---
	// Driver JDBC para conectar a aplicação a um banco de dados PostgreSQL.
	runtimeOnly 'org.postgresql:postgresql'

	// --- Security (JWT) ---
	// Biblioteca para criação e verificação de JSON Web Tokens (JWT).
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

	// --- GraphQL ---
	// Adiciona suporte para tipos escalares estendidos (ex: Date, Long) no GraphQL.
	implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'

	// SDK oficial do Google para interagir com a API do Gemini.
	implementation 'com.google.genai:google-genai:1.0.0'

	// iText 7 Core
	implementation 'com.itextpdf:itext7-core:7.1.18' // Verifique a versão mais recente

	// Módulo html2pdf para a conversão de HTML
	implementation 'com.itextpdf:html2pdf:3.0.1' // Verifique a versão mais recente

	// --- Code Generation & Utilities ---
	// Reduz código boilerplate (getters, setters, construtores) através de anotações.
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// Ferramenta para geração de mapeadores de beans (ex: DTO <-> Entity).
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	// Garante a integração correta entre Lombok e MapStruct.
	annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// --- Testing ---
	// Starter principal para testes, incluindo JUnit 5, Mockito e AssertJ.
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// Utilitários para testar endpoints GraphQL.
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	// Utilitários para testar a camada de segurança do Spring Security.
	testImplementation 'org.springframework.security:spring-security-test'
	// Permite a execução de testes na plataforma JUnit.
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Adicione este bloco ao seu build.gradle
bootRun {
	// Verifica se a propriedade 'debug' foi passada na linha de comando (ex: ./gradlew bootRun -Pdebug)
	if (project.hasProperty('debug')) {
		jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5009']
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

// --- Tasks para Gerenciamento do Docker Compose ---

/**
 * Para e remove os contêineres, redes e volumes definidos no docker-compose.yml.
 * Equivalente a: docker compose down
 */
tasks.register('dockerComposeDown', Exec) {
	group = 'Docker'
	description = 'Para e remove os contêineres do Docker Compose.'
	commandLine 'docker', 'compose', 'down'
}

/**
 * Executa 'docker compose down' e depois 'docker compose up -d --build'.
 * É a task principal para reiniciar todo o ambiente.
 */
tasks.register('dockerComposeRestart', Exec) {
	group = 'Docker'
	description = 'Reinicia o ambiente Docker Compose, forçando a reconstrução das imagens.'

	// Garante que a task 'dockerComposeDown' seja executada sempre antes desta.
	// A referência pelo nome da task funciona perfeitamente com o registro lazy.
	dependsOn 'dockerComposeDown'

	// Define o comando a ser executado.
	commandLine 'docker', 'compose', 'up', '-d', '--build'

	// Garante que a task sempre execute, ignorando o cache "UP-TO-DATE" do Gradle.
	outputs.upToDateWhen { false }
}

tasks.register('dockerComposeReload', Exec) {
	group = 'Docker'
	description = 'Reinicia um serviço específico ou todos os serviços.'

	outputs.upToDateWhen { false }

	doFirst {
		def command = ['docker', 'compose', 'restart']
		// Se a propriedade 'service' foi fornecida, adicione-a ao comando
		if (project.hasProperty('service')) {
			command.add(project.property('service'))
		}
		// Define a linha de comando final
		commandLine command
	}
}